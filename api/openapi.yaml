openapi: 3.0.1
info:
  description: "TODO: Add a description"
  title: FIWARE-NGSI v2 Specification
  version: "1.0"
servers:
- url: http://orion.lab.fiware.org/
paths:
  /v2:
    get:
      description: |-
        This resource does not have any attributes. Instead it offers the initial
        API affordances in the form of the links in the JSON body.
        It is recommended to follow the “url” link values,
        [Link](https://tools.ietf.org/html/rfc5988) or Location headers where
        applicable to retrieve resources. Instead of constructing your own URLs,
        to keep your client decoupled from implementation details.
      operationId: Retrieve API Resources
      responses:
        "200":
          content:
            application/json:
              example:
                entities_url: /v2/entities
                types_url: /v2/types
                subscriptions_url: /v2/subscriptions
                registrations_url: /v2/registrations
              schema:
                $ref: '#/components/schemas/RetrieveApiResourcesResponse'
          description: ""
      summary: Retrieve API Resources
      tags:
      - API Entry Point
      x-unitTests:
      - request:
          method: GET
          uri: /v2
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "{  \"entities_url\": \"/v2/entities\",  \"types_url\": \"/v2/types\"\
            ,  \"subscriptions_url\": \"/v2/subscriptions\",  \"registrations_url\"\
            : \"/v2/registrations\"}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Retrieve API Resources1
        x-testDescription: |-
          This resource does not have any attributes. Instead it offers the initial
          API affordances in the form of the links in the JSON body.
          It is recommended to follow the “url” link values,
          [Link](https://tools.ietf.org/html/rfc5988) or Location headers where
          applicable to retrieve resources. Instead of constructing your own URLs,
          to keep your client decoupled from implementation details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
  /v2/entities:
    get:
      description: "Retrieves a list of entities that match different criteria by\
        \ id, type, pattern matching (either id or type)\nand/or those which match\
        \ a query or geographical query (see [Simple Query Language](#simple_query_language)\
        \ and \n[Geographical Queries](#geographical_queries)). A given entity has\
        \ to match all the criteria to be retrieved\n(i.e., the criteria is combined\
        \ in a logical AND way). Note that pattern matching query parameters are incompatible\n\
        (i.e. mutually exclusive) with their corresponding exact matching parameters,\
        \ i.e. `idPattern` with `id` and\n`typePattern` with `type`.\nThe response\
        \ payload is an array containing one object per matching entity. Each entity\
        \ follows\nthe JSON entity representation format (described in \"JSON Entity\
        \ Representation\" section).\nResponse code:\n* Successful operation uses\
        \ 200 OK\n* Errors use a non-2xx and (optionally) an error payload. See subsection\
        \ on \"Error Responses\" for\n  more details."
      operationId: List Entities
      parameters:
      - description: |-
          A comma-separated list of elements.
          Retrieve entities whose ID matches one of the elements in the list.
          Incompatible with `idPattern`.
        in: query
        name: id
        schema:
          type: string
      - description: |-
          comma-separated list of elements.
          Retrieve entities whose type matches one of the elements in the list.
          Incompatible with `typePattern`.
        in: query
        name: type
        schema:
          type: string
      - description: |-
          A correctly formated regular expression.
          Retrieve entities whose ID matches the regular expression. Incompatible with `id`.
        in: query
        name: idPattern
        schema:
          type: string
      - description: |-
          A correctly formated regular expression.
          Retrieve entities whose type matches the regular expression. Incompatible with `type`.
        in: query
        name: typePattern
        schema:
          type: string
      - description: |-
          A query expression, composed of a list of statements
          separated by `;`, i.e., q=statement1;statement2;statement3.
          See [Simple Query Language specification](#simple_query_language).
        in: query
        name: q
        schema:
          type: string
      - description: |-
          A query expression for attribute metadata,
          composed of a list of statements separated by `;`, i.e., mq=statement1;statement2;statement3.
          See [Simple Query Language specification](#simple_query_language).
        in: query
        name: mq
        schema:
          type: string
      - description: |-
          Spatial relationship between matching entities and a
          reference shape. See [Geographical Queries](#geographical_queries).
        in: query
        name: georel
        schema:
          type: string
      - description: |-
          Geografical area to which the query is restricted.
          See [Geographical Queries](#geographical_queries).
        in: query
        name: geometry
        schema:
          type: string
      - description: |-
          List of latitude-longitude
          pairs of coordinates separated by ';'. See [Geographical Queries](#geographical_queries).
        in: query
        name: coords
        schema:
          type: string
      - description: Limits the number of entities to be retrieved
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Establishes the offset from where entities are retrieved
        in: query
        name: offset
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: |-
          Comma-separated list of attribute names whose data
          are to be included in the response.
          The attributes are retrieved in the order specified by this parameter. If this parameter is
          not included, the attributes are retrieved in arbitrary order.
          See "Filtering out attributes and metadata" section for more detail.
        in: query
        name: attrs
        schema:
          type: string
      - description: |-
          A list of metadata names to include in the response.
          See "Filtering out attributes and metadata" section for more detail.
        in: query
        name: metadata
        schema:
          type: string
      - description: |-
          Criteria for ordering results.
          See "Ordering Results" section for details.
        in: query
        name: orderBy
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - count
          - keyValues
          - values
          - unique
          type: string
          x-enum-elements:
          - name: count
            description: ""
          - name: keyValues
            description: ""
          - name: values
            description: ""
          - name: unique
            description: ""
        x-enum-elements:
        - name: count
          description: ""
        - name: keyValues
          description: ""
        - name: values
          description: ""
        - name: unique
          description: ""
      responses:
        "200":
          content:
            application/json:
              example:
              - type: Room
                id: DC_S1-D41
                temperature:
                  value: 35.6
                  type: Number
                  metadata: {}
              - type: Room
                id: Boe-Idearium
                temperature:
                  value: 22.5
                  type: Number
                  metadata: {}
              - type: Car
                id: P-9873-K
                speed:
                  value: 100
                  type: number
                  metadata:
                    accuracy:
                      value: 2
                      type: Number
                    timestamp:
                      value: 2015-06-04T07:20:27.378Z
                      type: DateTime
              schema:
                items:
                  $ref: '#/components/schemas/ListEntitiesResponse'
                type: array
          description: ""
      summary: List Entities
      tags:
      - Entities
      x-unitTests:
      - request:
          method: GET
          uri: "/v2/entities?id=Boe_Idearium&type=Room&idPattern=Bode_.*&typePattern=Room_.*&q=temperature>40&mq=temperature.accuracy<0.9&georel=near&geometry=point&coords=41.390205,2.154007;48.8566,2.3522&limit=20&offset=20&attrs=seatNumber&metadata=accuracy&orderBy=temperature,!speed"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "[ {   \"type\": \"Room\",   \"id\": \"DC_S1-D41\",   \"temperature\"\
            : {     \"value\": 35.6,     \"type\": \"Number\",     \"metadata\": {}\
            \   } }, {   \"type\": \"Room\",   \"id\": \"Boe-Idearium\",   \"temperature\"\
            : {     \"value\": 22.5,     \"type\": \"Number\",     \"metadata\": {}\
            \   } }, {   \"type\": \"Car\",   \"id\": \"P-9873-K\",   \"speed\": {\
            \     \"value\": 100,     \"type\": \"number\",     \"metadata\": {  \
            \     \"accuracy\": {         \"value\": 2,         \"type\": \"Number\"\
            \       },       \"timestamp\": {         \"value\": \"2015-06-04T07:20:27.378Z\"\
            ,         \"type\": \"DateTime\"       }     }   } }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: List Entities1
        x-testDescription: "Retrieves a list of entities that match different criteria\
          \ by id, type, pattern matching (either id or type)\nand/or those which\
          \ match a query or geographical query (see [Simple Query Language](#simple_query_language)\
          \ and \n[Geographical Queries](#geographical_queries)). A given entity has\
          \ to match all the criteria to be retrieved\n(i.e., the criteria is combined\
          \ in a logical AND way). Note that pattern matching query parameters are\
          \ incompatible\n(i.e. mutually exclusive) with their corresponding exact\
          \ matching parameters, i.e. `idPattern` with `id` and\n`typePattern` with\
          \ `type`.\nThe response payload is an array containing one object per matching\
          \ entity. Each entity follows\nthe JSON entity representation format (described\
          \ in \"JSON Entity Representation\" section).\nResponse code:\n* Successful\
          \ operation uses 200 OK\n* Errors use a non-2xx and (optionally) an error\
          \ payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    post:
      description: |-
        The payload is an object representing the entity to be created. The object follows
        the JSON entity representation format (described in a "JSON Entity Representation" section).
        Response:
        * Successful operation uses 201 Created (if upsert option is not used) or 204 No Content (if
          upsert option is used). Response includes a `Location` header with the URL of the
          created entity.
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Create Entity
      parameters:
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - keyValues
          - upsert
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
          - name: upsert
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
        - name: upsert
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateEntityRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Create Entity
      tags:
      - Entities
      x-unitTests:
      - request:
          method: POST
          uri: /v2/entities
          headers:
            Content-Type: application/json
          body: "{  \"type\": \"Room\",  \"id\": \"Bcn-Welt\",  \"temperature\": {\
            \    \"value\": 21.7  },  \"humidity\": {    \"value\": 60  },  \"location\"\
            : {    \"value\": \"41.3763726, 2.1864475\",    \"type\": \"geo:point\"\
            ,    \"metadata\": {      \"crs\": {        \"value\": \"WGS84\"     \
            \ }    }  }}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Location: /v2/entities/Bcn-Welt?type=Room
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Entity1
        x-testDescription: |-
          The payload is an object representing the entity to be created. The object follows
          the JSON entity representation format (described in a "JSON Entity Representation" section).
          Response:
          * Successful operation uses 201 Created (if upsert option is not used) or 204 No Content (if
            upsert option is used). Response includes a `Location` header with the URL of the
            created entity.
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/entities/{entityId}:
    delete:
      description: |-
        Delete the entity.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Remove Entity
      parameters:
      - description: Id of the entity to be deleted
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ""
      summary: Remove Entity
      tags:
      - Entities
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    get:
      description: |-
        The response is an object representing the entity identified by the ID. The object follows
        the JSON entity representation format (described in "JSON Entity Representation" section).
        This operation must return one entity element only, but there may be more than one entity with the
        same ID (e.g. entities with same ID but different types).
        In such case, an error message is returned, with the HTTP status code set to 409 Conflict.
        Response:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for more details.
      operationId: Retrieve Entity
      parameters:
      - description: Id of the entity to be retrieved
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      - description: |-
          Comma-separated list of attribute names whose
          data must be included in the response. The attributes are retrieved in the order specified by
          this parameter. See "Filtering out attributes and metadata" section for more detail.
          If this parameter is not included, the attributes are retrieved in arbitrary order, and all
          the attributes of the entity are included in the response.
        in: query
        name: attrs
        schema:
          type: string
      - description: |-
          A list of metadata names to include in the response.
          See "Filtering out attributes and metadata" section for more detail.
        in: query
        name: metadata
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - keyValues
          - values
          - unique
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
          - name: values
            description: ""
          - name: unique
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
        - name: values
          description: ""
        - name: unique
          description: ""
      responses:
        "200":
          content:
            application/json:
              example:
                type: Room
                id: Bcn_Welt
                temperature:
                  value: 21.7
                  type: Number
                humidity:
                  value: 60
                  type: Number
                location:
                  value: "41.3763726, 2.1864475"
                  type: geo:point
                  metadata:
                    crs:
                      value: WGS84
                      type: Text
              schema:
                $ref: '#/components/schemas/RetrieveEntityResponse'
          description: ""
      summary: Retrieve Entity
      tags:
      - Entities
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
  /v2/entities/{entityId}/attrs:
    get:
      description: |-
        This request is similar to retreiving the whole entity, however this one omits the `id` and `type`
        fields.
        Just like the general request of getting an entire entity, this operation must return only one
        entity element. If more than one entity with the same ID is found (e.g. entities with
        same ID but different type), an error message is returned, with the HTTP status code set to
        409 Conflict.
        Response:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Retrieve Entity Attributes
      parameters:
      - description: Id of the entity to be retrieved
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      - description: |-
          Comma-separated list of attribute names whose
          data are to be included in the response. The attributes are retrieved in the order specified
          by this parameter.
          If this parameter is not included, the attributes are retrieved in arbitrary order, and all
          the attributes of the entity are included in the response.
          See "Filtering out attributes and metadata" section for more detail.
        in: query
        name: attrs
        schema:
          type: string
      - description: |-
          A list of metadata names to include in the response.
          See "Filtering out attributes and metadata" section for more detail.
        in: query
        name: metadata
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - keyValues
          - values
          - unique
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
          - name: values
            description: ""
          - name: unique
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
        - name: values
          description: ""
        - name: unique
          description: ""
      responses:
        "200":
          content:
            application/json:
              example:
                temperature:
                  value: 21.7
                  type: Number
                humidity:
                  value: 60
                  type: Number
                location:
                  value: "41.3763726, 2.1864475"
                  type: geo:point
                  metadata:
                    crs:
                      value: WGS84
                      type: Text
              schema:
                $ref: '#/components/schemas/RetrieveEntityAttributesResponse'
          description: ""
      summary: Retrieve Entity Attributes
      tags:
      - Entities
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    patch:
      description: |-
        The request payload is an object representing the attributes to update. The object follows
        the JSON entity representation format (described in "JSON Entity Representation" section), except
        that `id` and `type` are not allowed.
        The entity attributes are updated with the ones in the payload. In addition to that, if one or more
        attributes in the payload doesn't exist in the entity, an error is returned.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update Existing Entity Attributes
      parameters:
      - description: Id of the entity to be updated
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      - description: Operations options
        in: query
        name: options
        schema:
          enum:
          - keyValues
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateExistingEntityAttributesRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Update Existing Entity Attributes
      tags:
      - Entities
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
    post:
      description: |-
        The request payload is an object representing the attributes to append or update. The object follows
        the JSON entity representation format (described in "JSON Entity Representation" section), except
        that `id` and `type` are not allowed.
        The entity attributes are updated with the ones in the payload, depending on
        whether the `append` operation option is used or not.
        * If `append` is not used: the entity attributes are updated (if they previously exist) or appended
          (if they don't previously exist) with the ones in the payload.
        * If `append` is used (i.e. strict append semantics): all the attributes in the payload not
          previously existing in the entity are appended. In addition to that, in case some of the
          attributes in the payload already exist in the entity, an error is returned.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update or Append Entity Attributes
      parameters:
      - description: Entity id to be updated
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      - description: Operations options
        in: query
        name: options
        schema:
          enum:
          - append
          - keyValues
          type: string
          x-enum-elements:
          - name: append
            description: ""
          - name: keyValues
            description: ""
        x-enum-elements:
        - name: append
          description: ""
        - name: keyValues
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrAppendEntityAttributesRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Update or Append Entity Attributes
      tags:
      - Entities
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
    put:
      description: |-
        The request payload is an object representing the new entity attributes. The object follows
        the JSON entity representation format (described in a "JSON Entity Representation" above), except
        that `id` and `type` are not allowed.
        The attributes previously existing in the entity are removed and replaced by the ones in the
        request.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Replace all entity attributes
      parameters:
      - description: Id of the entity in question.
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      - description: Operations options
        in: query
        name: options
        schema:
          enum:
          - keyValues
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplaceAllEntityAttributesRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Replace all entity attributes
      tags:
      - Entities
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/entities/{entityId}/attrs/{attrName}:
    delete:
      description: |-
        Removes an entity attribute.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Remove a Single Attribute
      parameters:
      - description: Id of the entity.
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: Attribute name.
        in: path
        name: attrName
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ""
      summary: Remove a Single Attribute
      tags:
      - Attributes
      x-unitTests:
      - request:
          method: DELETE
          uri: /v2/entities/Bcn_Welt/attrs/temperature
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Remove a Single Attribute1
        x-testDescription: |-
          Removes an entity attribute.
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    get:
      description: |-
        Returns a JSON object with the attribute data of the attribute. The object follows the JSON
        representation for attributes (described in "JSON Attribute Representation" section).
        Response:
        * Successful operation uses 200 OK.
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Get attribute data
      parameters:
      - description: Id of the entity
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: Name of the attribute to be retrieved.
        in: path
        name: attrName
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      - description: |-
          A list of metadata names to include in the response.
          See "Filtering out attributes and metadata" section for more detail.
        in: query
        name: metadata
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                value: 21.7
                type: Number
                metadata: {}
              schema:
                $ref: '#/components/schemas/GetAttributeDataResponse'
          description: ""
      summary: Get attribute data
      tags:
      - Attributes
      x-unitTests:
      - request:
          method: GET
          uri: /v2/entities/Bcn_Welt/attrs/temperature?metadata=accuracy
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "{  \"value\": 21.7,  \"type\": \"Number\",  \"metadata\": {}}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get attribute data1
        x-testDescription: |-
          Returns a JSON object with the attribute data of the attribute. The object follows the JSON
          representation for attributes (described in "JSON Attribute Representation" section).
          Response:
          * Successful operation uses 200 OK.
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    put:
      description: |-
        The request payload is an object representing the new attribute data. Previous attribute data
        is replaced by the one in the request. The object follows the JSON representation for attributes
        (described in "JSON Attribute Representation" section).
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update Attribute Data
      parameters:
      - description: Id of the entity to update
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: Attribute name
        in: path
        name: attrName
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttributeDataRequest'
        required: true
      responses:
        "200":
          content: {}
          description: ""
      summary: Update Attribute Data
      tags:
      - Attributes
      x-unitTests:
      - request:
          method: PUT
          uri: /v2/entities/Bcn_Welt/attrs/temperature
          headers:
            Content-Type: application/json
          body: "{  \"value\": 25.0,  \"metadata\": {    \"unitCode\": {      \"value\"\
            : \"CEL\"    }  }}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Attribute Data1
        x-testDescription: |-
          The request payload is an object representing the new attribute data. Previous attribute data
          is replaced by the one in the request. The object follows the JSON representation for attributes
          (described in "JSON Attribute Representation" section).
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/entities/{entityId}/attrs/{attrName}/value:
    get:
      description: |-
        This operation returns the `value` property with the value of the attribute.
        * If attribute value is JSON Array or Object:
          * If `Accept` header can be expanded to `application/json` or `text/plain` return the value as a JSON with a
            response type of application/json or text/plain (whichever is the first in `Accept` header or
            `application/json` in case of `Accept: */*`).
          * Else return a HTTP error "406 Not Acceptable: accepted MIME types: application/json, text/plain"
        * If attribute value is a string, number, null or boolean:
          * If `Accept` header can be expanded to text/plain return the value as text. In case of a string, citation
            marks are used at the begining and end.
          * Else return a HTTP error "406 Not Acceptable: accepted MIME types: text/plain"
        Response:
        * Successful operation uses 200 OK.
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Get Attribute Value
      parameters:
      - description: Id of the entity in question
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: Name of the attribute to be retrieved.
        in: path
        name: attrName
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                address: Ronda de la Comunicacion s/n
                zipCode: 28050
                city: Madrid
                country: Spain
              schema:
                $ref: '#/components/schemas/GetAttributeValueResponse'
          description: ""
      summary: Get Attribute Value
      tags:
      - Attribute Value
      x-unitTests:
      - request:
          method: GET
          uri: /v2/entities/Bcn_Welt/attrs/address/value
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "{  \"address\": \"Ronda de la Comunicacion s/n\",  \"zipCode\": 28050,\
            \  \"city\": \"Madrid\",  \"country\": \"Spain\"}"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Get Attribute Value1
        x-testDescription: |-
          This operation returns the `value` property with the value of the attribute.
          * If attribute value is JSON Array or Object:
            * If `Accept` header can be expanded to `application/json` or `text/plain` return the value as a JSON with a
              response type of application/json or text/plain (whichever is the first in `Accept` header or
              `application/json` in case of `Accept: */*`).
            * Else return a HTTP error "406 Not Acceptable: accepted MIME types: application/json, text/plain"
          * If attribute value is a string, number, null or boolean:
            * If `Accept` header can be expanded to text/plain return the value as text. In case of a string, citation
              marks are used at the begining and end.
            * Else return a HTTP error "406 Not Acceptable: accepted MIME types: text/plain"
          Response:
          * Successful operation uses 200 OK.
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    put:
      description: |-
        The request payload is the new attribute value.
        * If the request payload MIME type is `application/json`, then the value of the attribute is set to
          the JSON object or array coded in the payload (if the payload is not a valid JSON document,
          then an error is returned).
        * If the request payload MIME type is `text/plain`, then the following algorithm is applied to the
          payload:
          * If the payload starts and ends with citation-marks (`"`), the value is taken as a string
            (the citation marks themselves are not considered part of the string)
          * If `true` or `false`, the value is taken as a boolean.
          * If `null`, the value is taken as null.
          * If these first three tests 'fail', the text is interpreted as a number.
          * If not a valid number, then an error is returned and the attribute's value is unchanged.
        The payload MIME type in the request is specified in the `Content-Type` HTTP header.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update Attribute Value
      parameters:
      - description: Id of the entity to be updated.
        in: path
        name: entityId
        required: true
        schema:
          type: string
      - description: Attribute name.
        in: path
        name: attrName
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: |-
          Entity type, to avoid ambiguity in case there are several
          entities with the same entity id.
        in: query
        name: type
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAttributeValueRequest'
        required: true
      responses:
        "200":
          content: {}
          description: ""
      summary: Update Attribute Value
      tags:
      - Attribute Value
      x-unitTests:
      - request:
          method: PUT
          uri: /v2/entities/Bcn_Welt/attrs/address/value
          headers:
            Content-Type: application/json
          body: "{  \"address\": \"Ronda de la Comunicacion s/n\",  \"zipCode\": 28050,\
            \  \"city\": \"Madrid\",  \"country\": \"Spain\"}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Attribute Value1
        x-testDescription: |-
          The request payload is the new attribute value.
          * If the request payload MIME type is `application/json`, then the value of the attribute is set to
            the JSON object or array coded in the payload (if the payload is not a valid JSON document,
            then an error is returned).
          * If the request payload MIME type is `text/plain`, then the following algorithm is applied to the
            payload:
            * If the payload starts and ends with citation-marks (`"`), the value is taken as a string
              (the citation marks themselves are not considered part of the string)
            * If `true` or `false`, the value is taken as a boolean.
            * If `null`, the value is taken as null.
            * If these first three tests 'fail', the text is interpreted as a number.
            * If not a valid number, then an error is returned and the attribute's value is unchanged.
          The payload MIME type in the request is specified in the `Content-Type` HTTP header.
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/types/:
    get:
      description: |-
        If the `values` option is not in use, this operation returns a JSON array with the entity types.
        Each element is a JSON object with information about the type:
        * `type` : the entity type name.
        * `attrs` : the set of attribute names along with all the entities of such type, represented in
          a JSON object whose keys are the attribute names and whose values contain information of such
          attributes (in particular a list of the types used by attributes with that name along with all the
          entities).
        * `count` : the number of entities belonging to that type.
        If the `values` option is used, the operation returns a JSON array with a list of entity type
        names as strings.
        Results are ordered by entity `type` in alphabetical order.
        Response code:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: List Entity Types
      parameters:
      - description: Limit the number of types to be retrieved.
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Skip a number of records.
        in: query
        name: offset
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Options dictionary.
        in: query
        name: options
        schema:
          enum:
          - count
          - values
          type: string
          x-enum-elements:
          - name: count
            description: ""
          - name: values
            description: ""
        x-enum-elements:
        - name: count
          description: ""
        - name: values
          description: ""
      responses:
        "200":
          content:
            application/json:
              example:
              - type: Car
                attrs:
                  speed:
                    types:
                    - Number
                  fuel:
                    types:
                    - gasoline
                    - diesel
                  temperature:
                    types:
                    - urn:phenomenum:temperature
                count: 12
              - type: Room
                attrs:
                  pressure:
                    types:
                    - Number
                  humidity:
                    types:
                    - percentage
                  temperature:
                    types:
                    - urn:phenomenum:temperature
                count: 7
              schema:
                items:
                  $ref: '#/components/schemas/ListEntityTypesResponse'
                type: array
          description: ""
      summary: List Entity Types
      tags:
      - Types
      x-unitTests:
      - request:
          method: GET
          uri: /v2/types/?limit=10&offset=20
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "[  {    \"type\": \"Car\",    \"attrs\": {      \"speed\": {    \
            \    \"types\": [ \"Number\" ]      },      \"fuel\": {        \"types\"\
            : [ \"gasoline\", \"diesel\" ]      },      \"temperature\": {       \
            \ \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"count\"\
            : 12  },  {    \"type\": \"Room\",    \"attrs\": {      \"pressure\":\
            \ {        \"types\": [ \"Number\" ]      },      \"humidity\": {    \
            \    \"types\": [ \"percentage\" ]      },      \"temperature\": {   \
            \     \"types\": [ \"urn:phenomenum:temperature\" ]      }    },    \"\
            count\": 7  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: List Entity Types1
        x-testDescription: |-
          If the `values` option is not in use, this operation returns a JSON array with the entity types.
          Each element is a JSON object with information about the type:
          * `type` : the entity type name.
          * `attrs` : the set of attribute names along with all the entities of such type, represented in
            a JSON object whose keys are the attribute names and whose values contain information of such
            attributes (in particular a list of the types used by attributes with that name along with all the
            entities).
          * `count` : the number of entities belonging to that type.
          If the `values` option is used, the operation returns a JSON array with a list of entity type
          names as strings.
          Results are ordered by entity `type` in alphabetical order.
          Response code:
          * Successful operation uses 200 OK
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
  /v2/types/{entityType}:
    get:
      description: |-
        This operation returns a JSON object with information about the type:
        * `attrs` : the set of attribute names along with all the entities of such type, represented in
          a JSON object whose keys are the attribute names and whose values contain information of such
          attributes (in particular a list of the types used by attributes with that name along with all the
          entities).
        * `count` : the number of entities belonging to that type.
        Response code:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Retrieve entity type
      parameters:
      - description: Entity Type
        in: path
        name: entityType
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                attrs:
                  pressure:
                    types:
                    - Number
                  humidity:
                    types:
                    - percentage
                  temperature:
                    types:
                    - urn:phenomenum:temperature
                count: 7
              schema:
                $ref: '#/components/schemas/RetrieveEntityTypeResponse'
          description: ""
      summary: Retrieve entity type
      tags:
      - Types
      x-unitTests:
      - request:
          method: GET
          uri: /v2/types/Room
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "  {    \"attrs\": {      \"pressure\": {        \"types\": [ \"Number\"\
            \ ]      },      \"humidity\": {        \"types\": [ \"percentage\" ]\
            \      },      \"temperature\": {        \"types\": [ \"urn:phenomenum:temperature\"\
            \ ]      }    },    \"count\": 7  }"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Retrieve entity type1
        x-testDescription: |-
          This operation returns a JSON object with information about the type:
          * `attrs` : the set of attribute names along with all the entities of such type, represented in
            a JSON object whose keys are the attribute names and whose values contain information of such
            attributes (in particular a list of the types used by attributes with that name along with all the
            entities).
          * `count` : the number of entities belonging to that type.
          Response code:
          * Successful operation uses 200 OK
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
  /v2/subscriptions:
    get:
      description: |-
        Returns a list of all the subscriptions present in the system.
        Response:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: List Subscriptions
      parameters:
      - description: Limit the number of subscriptions to be retrieved
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Skip a number of subscriptions
        in: query
        name: offset
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - count
          type: string
          x-enum-elements:
          - name: count
            description: ""
        x-enum-elements:
        - name: count
          description: ""
      responses:
        "200":
          content:
            application/json:
              example:
              - id: abcdefg
                description: One subscription to rule them all
                subject:
                  entities:
                  - id: Bcn_Welt
                    type: Room
                  condition:
                    attrs:
                    - 'temperature '
                    expression:
                      q: temperature>40
                notification:
                  httpCustom:
                    url: http://localhost:1234
                    headers:
                      X-MyHeader: foo
                    qs:
                      authToken: bar
                  attrsFormat: keyValues
                  attrs:
                  - temperature
                  - humidity
                  timesSent: 12
                  lastNotification: 2015-10-05T16:00:00Z
                  lastFailure: 2015-10-06T16:00:00Z
                expires: 2016-04-05T14:00:00Z
                status: failed
                throttling: 5
              schema:
                items:
                  $ref: '#/components/schemas/ListSubscriptionsResponse'
                type: array
          description: ""
      summary: List Subscriptions
      tags:
      - Subscriptions
      x-unitTests:
      - request:
          method: GET
          uri: /v2/subscriptions?limit=10&offset=20
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: "[  {    \"id\": \"abcdefg\",    \"description\": \"One subscription\
            \ to rule them all\",    \"subject\": {                          \"entities\"\
            : [        {          \"id\": \"Bcn_Welt\",          \"type\": \"Room\"\
            \        }      ],      \"condition\": {         \"attrs\": [ \"temperature\
            \ \" ],         \"expression\": {            \"q\": \"temperature>40\"\
            \         }      }    },    \"notification\": {      \"httpCustom\": {\
            \        \"url\": \"http://localhost:1234\",        \"headers\": {   \
            \       \"X-MyHeader\": \"foo\"        },        \"qs\": {          \"\
            authToken\": \"bar\"        }      },      \"attrsFormat\": \"keyValues\"\
            ,      \"attrs\": [\"temperature\", \"humidity\"],      \"timesSent\"\
            : 12,      \"lastNotification\": \"2015-10-05T16:00:00.00Z\",      \"\
            lastFailure\": \"2015-10-06T16:00:00.00Z\"    },    \"expires\": \"2016-04-05T14:00:00.00Z\"\
            ,    \"status\": \"failed\",    \"throttling\": 5  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: List Subscriptions1
        x-testDescription: |-
          Returns a list of all the subscriptions present in the system.
          Response:
          * Successful operation uses 200 OK
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    post:
      description: |-
        Creates a new subscription.
        The subscription is represented by a JSON object as described at the beginning of this section.
        Response:
        * Successful operation uses 201 Created
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Create Subscription
      parameters:
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubscriptionRequest'
        required: true
      responses:
        "201":
          content: {}
          description: ""
      summary: Create Subscription
      tags:
      - Subscriptions
      x-unitTests:
      - request:
          method: POST
          uri: /v2/subscriptions
          headers:
            Content-Type: application/json
          body: "{  \"description\": \"One subscription to rule them all\",  \"subject\"\
            : {    \"entities\": [      {        \"idPattern\": \".*\",        \"\
            type\": \"Room\"      }    ],    \"condition\": {      \"attrs\": [ \"\
            temperature\" ],      \"expression\": {        \"q\": \"temperature>40\"\
            \      }    }  },  \"notification\": {    \"http\": {      \"url\": \"\
            http://localhost:1234\"    },    \"attrs\": [\"temperature\", \"humidity\"\
            ]  },              \"expires\": \"2016-04-05T14:00:00.00Z\",  \"throttling\"\
            : 5}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Location: /v2/subscriptions/abcde98765
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Subscription1
        x-testDescription: |-
          Creates a new subscription.
          The subscription is represented by a JSON object as described at the beginning of this section.
          Response:
          * Successful operation uses 201 Created
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/subscriptions/{subscriptionId}:
    delete:
      description: |-
        Cancels subscription.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Delete subscription
      parameters:
      - description: subscription Id.
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ""
      summary: Delete subscription
      tags:
      - Subscriptions
      x-unitTests:
      - request:
          method: DELETE
          uri: /v2/subscriptions/abcdef
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete subscription1
        x-testDescription: |-
          Cancels subscription.
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    get:
      description: |-
        The response is the subscription represented by a JSON object as described at the beginning of this
        section.
        Response:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Retrieve Subscription
      parameters:
      - description: subscription Id.
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: ""
      summary: Retrieve Subscription
      tags:
      - Subscriptions
      x-unitTests: []
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    patch:
      description: |-
        Only the fields included in the request are updated in the subscription.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update Subscription
      parameters:
      - description: subscription Id.
        in: path
        name: subscriptionId
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSubscriptionRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Update Subscription
      tags:
      - Subscriptions
      x-unitTests:
      - request:
          method: PATCH
          uri: /v2/subscriptions/abcdef
          headers:
            Content-Type: application/json
          body: "{  \"expires\": \"2016-04-05T14:00:00.00Z\"}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Subscription1
        x-testDescription: |-
          Only the fields included in the request are updated in the subscription.
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/registrations:
    get:
      description: Lists all the context provider registrations present in the system.
      operationId: List Registrations
      parameters:
      - description: Limit the number of registrations to be retrieved
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Skip a number of registrations
        in: query
        name: offset
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - count
          type: string
          x-enum-elements:
          - name: count
            description: ""
        x-enum-elements:
        - name: count
          description: ""
      responses:
        "200":
          content:
            application/json:
              example:
              - id: abcdefg
                description: Example Context Source
                dataProvided:
                  entities:
                  - id: Bcn_Welt
                    type: Room
                  attrs:
                  - temperature
                provider:
                  http:
                    url: http://contextsource.example.org
                  supportedForwardingMode: all
                expires: 2017-10-31T12:00:00
                status: active
                forwardingInformation:
                  timesSent: 12
                  lastForwarding: 2017-10-06T16:00:00Z
                  lastSuccess: 2017-10-06T16:00:00Z
                  lastFailure: 2017-10-05T16:00:00Z
              schema:
                items:
                  $ref: '#/components/schemas/ListRegistrationsResponse'
                type: array
          description: ""
      summary: List Registrations
      tags:
      - Registrations
      x-unitTests:
      - request:
          method: GET
          uri: /v2/registrations?limit=10&offset=20
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
          body: "[  {    \"id\": \"abcdefg\",    \"description\": \"Example Context\
            \ Source\",    \"dataProvided\": {      \"entities\": [        {     \
            \     \"id\": \"Bcn_Welt\",          \"type\": \"Room\"        }     \
            \ ],      \"attrs\": [        \"temperature\"      ]    },    \"provider\"\
            : {      \"http\": {        \"url\": \"http://contextsource.example.org\"\
            \      },      \"supportedForwardingMode\": \"all\"    },    \"expires\"\
            : \"2017-10-31T12:00:00\",    \"status\": \"active\",    \"forwardingInformation\"\
            : {      \"timesSent\": 12,      \"lastForwarding\": \"2017-10-06T16:00:00.00Z\"\
            ,      \"lastSuccess\": \"2017-10-06T16:00:00.00Z\",      \"lastFailure\"\
            : \"2017-10-05T16:00:00.00Z\"    }  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: List Registrations1
        x-testDescription: Lists all the context provider registrations present in
          the system.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    post:
      description: |-
        Creates a new context provider registration. This is typically used for binding context sources
        as providers of certain data.
        The registration is represented by a JSON object as described at the beginning of this section.
        Response:
        * Successful operation uses 201 Created
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Create Registration
      parameters:
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRegistrationRequest'
        required: true
      responses:
        "201":
          content: {}
          description: ""
      summary: Create Registration
      tags:
      - Registrations
      x-unitTests:
      - request:
          method: POST
          uri: /v2/registrations
          headers:
            Content-Type: application/json
          body: "{  \"description\": \"Relative Humidity Context Source\",  \"dataProvided\"\
            : {    \"entities\": [      {        \"id\": \"room2\",        \"type\"\
            : \"Room\"      }    ],    \"attrs\": [      \"relativeHumidity\"    ]\
            \  },  \"provider\": {    \"http\":{       \"url\": \"http://localhost:1234\"\
            \    }  }}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Location: /v2/registrations/abcde98765
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Create Registration1
        x-testDescription: |-
          Creates a new context provider registration. This is typically used for binding context sources
          as providers of certain data.
          The registration is represented by a JSON object as described at the beginning of this section.
          Response:
          * Successful operation uses 201 Created
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/registrations/{registrationId}:
    delete:
      description: |-
        Cancels a context provider registration.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Delete Registration
      parameters:
      - description: registration Id.
        in: path
        name: registrationId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: ""
      summary: Delete Registration
      tags:
      - Registrations
      x-unitTests:
      - request:
          method: DELETE
          uri: /v2/registrations/abcdef
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Delete Registration1
        x-testDescription: |-
          Cancels a context provider registration.
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    get:
      description: |-
        The response is the registration represented by a JSON object as described at the beginning of this
        section.
        Response:
        * Successful operation uses 200 OK
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Retrieve Registration
      parameters:
      - description: registration Id.
        in: path
        name: registrationId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              example:
                id: abcdefg
                description: Example Context Source
                dataProvided:
                  entities:
                  - id: Bcn_Welt
                    type: Room
                  attrs:
                  - temperature
                provider:
                  http:
                    url: http://contextsource.example.org
                  supportedForwardingMode: all
                expires: 2017-10-31T12:00:00
                status: failed
                forwardingInformation:
                  timesSent: 12
                  lastForwarding: 2017-10-06T16:00:00Z
                  lastFailure: 2017-10-06T16:00:00Z
                  lastSuccess: 2017-10-05T18:25:00Z
              schema:
                $ref: '#/components/schemas/RetrieveRegistrationResponse'
          description: ""
      summary: Retrieve Registration
      tags:
      - Registrations
      x-unitTests:
      - request:
          method: GET
          uri: /v2/registrations/abcdef
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "  {        \"id\": \"abcdefg\",        \"description\": \"Example\
            \ Context Source\",        \"dataProvided\": {          \"entities\":\
            \ [            {              \"id\": \"Bcn_Welt\",              \"type\"\
            : \"Room\"            }          ],          \"attrs\": [            \"\
            temperature\"          ]        },        \"provider\": {          \"\
            http\": {            \"url\": \"http://contextsource.example.org\"   \
            \       },          \"supportedForwardingMode\": \"all\"        },   \
            \     \"expires\": \"2017-10-31T12:00:00\",        \"status\": \"failed\"\
            ,        \"forwardingInformation\": {          \"timesSent\": 12,    \
            \      \"lastForwarding\": \"2017-10-06T16:00:00.00Z\",          \"lastFailure\"\
            : \"2017-10-06T16:00:00.00Z\",          \"lastSuccess\": \"2017-10-05T18:25:00.00Z\"\
            ,        }  }      "
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Retrieve Registration1
        x-testDescription: |-
          The response is the registration represented by a JSON object as described at the beginning of this
          section.
          Response:
          * Successful operation uses 200 OK
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-accepts:
      - application/json
    patch:
      description: |-
        Only the fields included in the request are updated in the registration.
        Response:
        * Successful operation uses 204 No Content
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update Registration
      parameters:
      - description: registration Id.
        in: path
        name: registrationId
        required: true
        schema:
          type: string
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRegistrationRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Update Registration
      tags:
      - Registrations
      x-unitTests:
      - request:
          method: PATCH
          uri: /v2/registrations/abcdef
          headers:
            Content-Type: application/json
          body: "{    \"expires\": \"2017-10-04T00:00:00\"}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update Registration1
        x-testDescription: |-
          Only the fields included in the request are updated in the registration.
          Response:
          * Successful operation uses 204 No Content
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/op/update:
    post:
      description: |-
        This operation allows to create, update and/or delete several entities in a single batch operation.
        The payload is an object with two properties:
        + `actionType`, to specify the kind of update action to do: either `append`, `appendStrict`, `update`,
          `delete`, or `replace`.
        + `entities`, an array of entities, each entity specified using the JSON entity representation format
          (described in the section "JSON Entity Representation").
        This operation is split in as many individual operations as entities in the `entities` vector, so
        the `actionType` is executed for each one of them. Depending on the `actionType`, a mapping with
        regular non-batch operations can be done:
        * `append`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`
          (if the entity already exists).
        * `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or
          `POST /v2/entities/<id>/attrs?options=append` (if the entity already exists).
        * `update`: maps to `PATCH /v2/entities/<id>/attrs`.
        * `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute included in the entity or
          to `DELETE /v2/entities/<id>` if no attribute were included in the entity.
        * `replace`: maps to `PUT /v2/entities/<id>/attrs`.
        Response:
        * Successful operation uses 204 No Content.
        * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
          more details.
      operationId: Update
      parameters:
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - keyValues
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateRequest'
        required: true
      responses:
        "204":
          content: {}
          description: ""
      summary: Update
      tags:
      - Batch Operations
      x-unitTests:
      - request:
          method: POST
          uri: /v2/op/update
          headers:
            Content-Type: application/json
          body: "{  \"actionType\": \"append\",  \"entities\": [    {      \"type\"\
            : \"Room\",      \"id\": \"Bcn-Welt\",      \"temperature\": {       \
            \ \"value\": 21.7       },      \"humidity\": {        \"value\": 60 \
            \     }    },    {      \"type\": \"Room\",      \"id\": \"Mad_Aud\",\
            \      \"temperature\": {        \"value\": 22.9      },      \"humidity\"\
            : {        \"value\": 85      }    }  ]}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers: {}
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Update1
        x-testDescription: |-
          This operation allows to create, update and/or delete several entities in a single batch operation.
          The payload is an object with two properties:
          + `actionType`, to specify the kind of update action to do: either `append`, `appendStrict`, `update`,
            `delete`, or `replace`.
          + `entities`, an array of entities, each entity specified using the JSON entity representation format
            (described in the section "JSON Entity Representation").
          This operation is split in as many individual operations as entities in the `entities` vector, so
          the `actionType` is executed for each one of them. Depending on the `actionType`, a mapping with
          regular non-batch operations can be done:
          * `append`: maps to `POST /v2/entities` (if the entity does not already exist) or `POST /v2/entities/<id>/attrs`
            (if the entity already exists).
          * `appendStrict`: maps to `POST /v2/entities` (if the entity does not already exist) or
            `POST /v2/entities/<id>/attrs?options=append` (if the entity already exists).
          * `update`: maps to `PATCH /v2/entities/<id>/attrs`.
          * `delete`: maps to `DELETE /v2/entities/<id>/attrs/<attrName>` on every attribute included in the entity or
            to `DELETE /v2/entities/<id>` if no attribute were included in the entity.
          * `replace`: maps to `PUT /v2/entities/<id>/attrs`.
          Response:
          * Successful operation uses 204 No Content.
          * Errors use a non-2xx and (optionally) an error payload. See subsection on "Error Responses" for
            more details.
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/op/query:
    post:
      description: "The response payload is an Array containing one object per matching\
        \ entity, or an empty array `[]` if \nno entities are found. The entities\
        \ follow the JSON entity representation format\n(described in the section\
        \ \"JSON Entity Representation\").\nThe payload may contain the following\
        \ elements (all of them optional):\n+ `entities`: a list of entites to search\
        \ for. Each element is represented by a JSON object with the\n  following\
        \ elements:\n    + `id` or `idPattern`: Id or pattern of the affected entities.\
        \ Both cannot be used at the same\n      time, but one of them must be present.\n\
        \    + `type` or `typePattern`: Type or type pattern of the entities to search\
        \ for. Both cannot be used at\n      the same time. If omitted, it means \"\
        any entity type\".\n+ `attrs`: List of attributes to be provided (if not specified,\
        \ all attributes).\n+ `expression`: an expression composed of `q`, `mq`, `georel`,\
        \ `geometry` and `coords` (see \"List\n   entities\" operation above about\
        \ this field).\n+ `metadata`: a list of metadata names to include in the response.\n\
        \   See \"Filtering out attributes and metadata\" section for more detail.\n\
        Response code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: Query
      parameters:
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: Limit the number of entities to be retrieved.
        in: query
        name: limit
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: Skip a number of records.
        in: query
        name: offset
        schema:
          exclusiveMaximum: false
          exclusiveMinimum: false
          format: double
          type: number
      - description: |-
          Criteria for ordering results.
          See "Ordering Results" section for details.
        in: query
        name: orderBy
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - count
          - keyValues
          - values
          - unique
          type: string
          x-enum-elements:
          - name: count
            description: ""
          - name: keyValues
            description: ""
          - name: values
            description: ""
          - name: unique
            description: ""
        x-enum-elements:
        - name: count
          description: ""
        - name: keyValues
          description: ""
        - name: values
          description: ""
        - name: unique
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QueryRequest'
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
              - type: Room
                id: DC_S1-D41
                temperature:
                  value: 35.6
                  type: Number
              - type: Room
                id: Boe-Idearium
                temperature:
                  value: 22.5
                  type: Number
              - type: Car
                id: P-9873-K
                temperature:
                  value: 40
                  type: Number
                  accuracy: 2
                  timestamp:
                    value: 2015-06-04T07:20:27.378Z
                    type: DateTime
              schema:
                items:
                  $ref: '#/components/schemas/QueryResponse'
                type: array
          description: ""
      summary: Query
      tags:
      - Batch Operations
      x-unitTests:
      - request:
          method: POST
          uri: "/v2/op/query?limit=10&offset=20&orderBy=temperature,!speed"
          headers:
            Content-Type: application/json
          body: "{  \"entities\": [    {      \"idPattern\": \".*\",      \"type\"\
            : \"Room\"    },    {      \"id\": \"Car\",      \"type\": \"P-9873-K\"\
            \    }  ],  \"attrs\": [    \"temperature\",    \"humidity\"  ],  \"expression\"\
            : {     \"q\": \"temperature>20\"  },  \"metadata\": [    \"accuracy\"\
            ,    \"timestamp\"  ]}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: RAW
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
          body: "[  {    \"type\": \"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\"\
            : {      \"value\": 35.6,      \"type\": \"Number\"    }  },  {    \"\
            type\": \"Room\",    \"id\": \"Boe-Idearium\",    \"temperature\": { \
            \     \"value\": 22.5,      \"type\": \"Number\"    }  },  {    \"type\"\
            : \"Car\",    \"id\": \"P-9873-K\",    \"temperature\": {      \"value\"\
            : 40,      \"type\": \"Number\",      \"accuracy\": 2,      \"timestamp\"\
            : {        \"value\": \"2015-06-04T07:20:27.378Z\",        \"type\": \"\
            DateTime\"      }    }  }]"
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Query1
        x-testDescription: "The response payload is an Array containing one object\
          \ per matching entity, or an empty array `[]` if \nno entities are found.\
          \ The entities follow the JSON entity representation format\n(described\
          \ in the section \"JSON Entity Representation\").\nThe payload may contain\
          \ the following elements (all of them optional):\n+ `entities`: a list of\
          \ entites to search for. Each element is represented by a JSON object with\
          \ the\n  following elements:\n    + `id` or `idPattern`: Id or pattern of\
          \ the affected entities. Both cannot be used at the same\n      time, but\
          \ one of them must be present.\n    + `type` or `typePattern`: Type or type\
          \ pattern of the entities to search for. Both cannot be used at\n      the\
          \ same time. If omitted, it means \"any entity type\".\n+ `attrs`: List\
          \ of attributes to be provided (if not specified, all attributes).\n+ `expression`:\
          \ an expression composed of `q`, `mq`, `georel`, `geometry` and `coords`\
          \ (see \"List\n   entities\" operation above about this field).\n+ `metadata`:\
          \ a list of metadata names to include in the response.\n   See \"Filtering\
          \ out attributes and metadata\" section for more detail.\nResponse code:\n\
          * Successful operation uses 200 OK\n* Errors use a non-2xx and (optionally)\
          \ an error payload. See subsection on \"Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
  /v2/op/notify:
    post:
      description: "This operation is intended to consume a notification payload so\
        \ that all the entity data included by such notification is persisted, overwriting\
        \ if necessary.\nThis operation is useful when one NGSIv2 endpoint is subscribed\
        \ to another NGSIv2 endpoint (federation scenarios). \nThe request payload\
        \ must be an NGSIv2 notification payload. \nThe behaviour must be exactly\
        \ the same as `POST /v2/op/update` with `actionType` equal to `append`.\n\
        Response code:\n* Successful operation uses 200 OK\n* Errors use a non-2xx\
        \ and (optionally) an error payload. See subsection on \"Error Responses\"\
        \ for\n  more details."
      operationId: Notify
      parameters:
      - in: header
        name: Content-Type
        required: true
        schema:
          type: string
      - description: Options dictionary
        in: query
        name: options
        schema:
          enum:
          - keyValues
          type: string
          x-enum-elements:
          - name: keyValues
            description: ""
        x-enum-elements:
        - name: keyValues
          description: ""
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotifyRequest'
        required: true
      responses:
        "200":
          content: {}
          description: ""
      summary: Notify
      tags:
      - Batch Operations
      x-unitTests:
      - request:
          method: POST
          uri: /v2/op/notify
          headers:
            Content-Type: application/json
          body: "{  \"subscriptionId\": \"5aeb0ee97d4ef10a12a0262f\",  \"data\": [{\
            \    \"type\": \"Room\",    \"id\": \"DC_S1-D41\",    \"temperature\"\
            : {      \"value\": 35.6,      \"type\": \"Number\"    }  },  {    \"\
            type\": \"Room\",    \"id\": \"Boe-Idearium\",    \"temperature\": { \
            \     \"value\": 22.5,      \"type\": \"Number\"    }  }]}"
        expectedResponse:
          x-allowExtraHeaders: true
          x-bodyMatchMode: NONE
          x-arrayOrderedMatching: false
          x-arrayCheckCount: false
          x-matchResponseSchema: true
          headers:
            Content-Type: application/json
        x-testShouldPass: true
        x-testEnabled: true
        x-testName: Notify1
        x-testDescription: "This operation is intended to consume a notification payload\
          \ so that all the entity data included by such notification is persisted,\
          \ overwriting if necessary.\nThis operation is useful when one NGSIv2 endpoint\
          \ is subscribed to another NGSIv2 endpoint (federation scenarios). \nThe\
          \ request payload must be an NGSIv2 notification payload. \nThe behaviour\
          \ must be exactly the same as `POST /v2/op/update` with `actionType` equal\
          \ to `append`.\nResponse code:\n* Successful operation uses 200 OK\n* Errors\
          \ use a non-2xx and (optionally) an error payload. See subsection on \"\
          Error Responses\" for\n  more details."
      x-operation-settings:
        CollectParameters: false
        AllowDynamicQueryParameters: false
        AllowDynamicFormParameters: false
        IsMultiContentStreaming: false
      x-codegen-request-body-name: body
      x-content-type: application/json
      x-accepts:
      - application/json
components:
  schemas:
    RetrieveApiResourcesResponse:
      example:
        entities_url: /v2/entities
        types_url: /v2/types
        subscriptions_url: /v2/subscriptions
        registrations_url: /v2/registrations
      properties:
        entities_url:
          description: URL which points to the entities resource
          example: /v2/entities
          type: string
        types_url:
          description: URL which points to the types resource
          example: /v2/types
          type: string
        subscriptions_url:
          description: |-
            URL which points to the
            subscriptions resource
          example: /v2/subscriptions
          type: string
        registrations_url:
          description: |-
            URL which points to the
            registrations resource
          example: /v2/registrations
          type: string
      required:
      - entities_url
      - registrations_url
      - subscriptions_url
      - types_url
      title: Retrieve API Resources response
      type: object
    Options:
      enum:
      - count
      - keyValues
      - values
      - unique
      example: count
      title: options
      type: string
      x-enum-elements:
      - name: count
        description: ""
      - name: keyValues
        description: ""
      - name: values
        description: ""
      - name: unique
        description: ""
    ListEntitiesResponse:
      example:
        type: Room
        id: DC_S1-D41
        temperature:
          value: 35.6
          type: Number
          metadata: {}
      properties:
        type:
          description: ""
          example: Room
          type: string
        id:
          description: ""
          example: DC_S1-D41
          type: string
        temperature:
          description: ""
          example:
            value: 35.6
            type: Number
            metadata: {}
          properties: {}
          type: object
        speed:
          description: ""
          example:
            value: 100
            type: number
            metadata:
              accuracy:
                value: 2
                type: Number
              timestamp:
                value: 2015-06-04T07:20:27.378Z
                type: DateTime
          properties: {}
          type: object
      required:
      - id
      - type
      title: List Entities response
      type: object
    Options3:
      enum:
      - keyValues
      - upsert
      example: keyValues
      title: options3
      type: string
      x-enum-elements:
      - name: keyValues
        description: ""
      - name: upsert
        description: ""
    CreateEntityRequest:
      example:
        type: Room
        id: Bcn-Welt
        temperature:
          value: 21.7
        humidity:
          value: 60
        location:
          value: "41.3763726, 2.1864475"
          type: geo:point
          metadata:
            crs:
              value: WGS84
      properties:
        type:
          description: ""
          example: Room
          type: string
        id:
          description: ""
          example: Bcn-Welt
          type: string
        temperature:
          description: ""
          example:
            value: 21.7
          properties: {}
          type: object
        humidity:
          description: ""
          example:
            value: 60
          properties: {}
          type: object
        location:
          description: ""
          example:
            value: "41.3763726, 2.1864475"
            type: geo:point
            metadata:
              crs:
                value: WGS84
          properties: {}
          type: object
      required:
      - humidity
      - id
      - location
      - temperature
      - type
      title: Create Entity request
      type: object
    Options6:
      enum:
      - keyValues
      - values
      - unique
      example: keyValues
      title: options6
      type: string
      x-enum-elements:
      - name: keyValues
        description: ""
      - name: values
        description: ""
      - name: unique
        description: ""
    RetrieveEntityResponse:
      example:
        type: Room
        id: Bcn_Welt
        temperature:
          value: 21.7
          type: Number
        humidity:
          value: 60
          type: Number
        location:
          value: "41.3763726, 2.1864475"
          type: geo:point
          metadata:
            crs:
              value: WGS84
              type: Text
      properties:
        type:
          description: ""
          example: Room
          type: string
        id:
          description: ""
          example: Bcn_Welt
          type: string
        temperature:
          description: ""
          example:
            value: 21.7
            type: Number
          properties: {}
          type: object
        humidity:
          description: ""
          example:
            value: 60
            type: Number
          properties: {}
          type: object
        location:
          description: ""
          example:
            value: "41.3763726, 2.1864475"
            type: geo:point
            metadata:
              crs:
                value: WGS84
                type: Text
          properties: {}
          type: object
      required:
      - humidity
      - id
      - location
      - temperature
      - type
      title: Retrieve Entity response
      type: object
    RetrieveEntityAttributesResponse:
      example:
        temperature:
          value: 21.7
          type: Number
        humidity:
          value: 60
          type: Number
        location:
          value: "41.3763726, 2.1864475"
          type: geo:point
          metadata:
            crs:
              value: WGS84
              type: Text
      properties:
        temperature:
          description: ""
          example:
            value: 21.7
            type: Number
          properties: {}
          type: object
        humidity:
          description: ""
          example:
            value: 60
            type: Number
          properties: {}
          type: object
        location:
          description: ""
          example:
            value: "41.3763726, 2.1864475"
            type: geo:point
            metadata:
              crs:
                value: WGS84
                type: Text
          properties: {}
          type: object
      required:
      - humidity
      - location
      - temperature
      title: Retrieve Entity Attributes response
      type: object
    Options10:
      enum:
      - append
      - keyValues
      example: append
      title: options10
      type: string
      x-enum-elements:
      - name: append
        description: ""
      - name: keyValues
        description: ""
    UpdateOrAppendEntityAttributesRequest:
      example:
        ambientNoise:
          value: 31.5
      properties:
        ambientNoise:
          description: ""
          example:
            value: 31.5
          properties: {}
          type: object
      required:
      - ambientNoise
      title: Update or Append Entity Attributes request
      type: object
    Options12:
      enum:
      - keyValues
      example: keyValues
      title: options12
      type: string
      x-enum-elements:
      - name: keyValues
        description: ""
    UpdateExistingEntityAttributesRequest:
      example:
        temperature:
          value: 25.5
        seatNumber:
          value: 6
      properties:
        temperature:
          description: ""
          example:
            value: 25.5
          properties: {}
          type: object
        seatNumber:
          description: ""
          example:
            value: 6
          properties: {}
          type: object
      required:
      - seatNumber
      - temperature
      title: Update Existing Entity Attributes request
      type: object
    ReplaceAllEntityAttributesRequest:
      example:
        temperature:
          value: 25.5
        seatNumber:
          value: 6
      properties:
        temperature:
          description: ""
          example:
            value: 25.5
          properties: {}
          type: object
        seatNumber:
          description: ""
          example:
            value: 6
          properties: {}
          type: object
      required:
      - seatNumber
      - temperature
      title: Replace all entity attributes request
      type: object
    GetAttributeDataResponse:
      example:
        value: 21.7
        type: Number
        metadata: {}
      properties:
        value:
          description: ""
          example: 21.7
          format: double
          type: number
        type:
          description: ""
          example: Number
          type: string
        metadata:
          description: ""
          example: {}
          properties: {}
          type: object
      required:
      - metadata
      - type
      - value
      title: Get attribute data response
      type: object
    UpdateAttributeDataRequest:
      example:
        value: 25.0
        metadata:
          unitCode:
            value: CEL
      properties:
        value:
          description: ""
          example: 25.0
          format: double
          type: number
        metadata:
          description: ""
          example:
            unitCode:
              value: CEL
          properties: {}
          type: object
      required:
      - metadata
      - value
      title: Update Attribute Data request
      type: object
    GetAttributeValueResponse:
      example:
        address: Ronda de la Comunicacion s/n
        zipCode: 28050
        city: Madrid
        country: Spain
      properties:
        address:
          description: ""
          example: Ronda de la Comunicacion s/n
          type: string
        zipCode:
          description: ""
          example: 28050
          format: int32
          type: integer
        city:
          description: ""
          example: Madrid
          type: string
        country:
          description: ""
          example: Spain
          type: string
      required:
      - address
      - city
      - country
      - zipCode
      title: Get Attribute Value response
      type: object
    UpdateAttributeValueRequest:
      example:
        address: Ronda de la Comunicacion s/n
        zipCode: 28050
        city: Madrid
        country: Spain
      properties:
        address:
          description: ""
          example: Ronda de la Comunicacion s/n
          type: string
        zipCode:
          description: ""
          example: 28050
          format: int32
          type: integer
        city:
          description: ""
          example: Madrid
          type: string
        country:
          description: ""
          example: Spain
          type: string
      required:
      - address
      - city
      - country
      - zipCode
      title: Update Attribute Value request
      type: object
    Options20:
      enum:
      - count
      - values
      example: count
      title: options20
      type: string
      x-enum-elements:
      - name: count
        description: ""
      - name: values
        description: ""
    ListEntityTypesResponse:
      example:
        type: Car
        attrs:
          speed:
            types:
            - Number
          fuel:
            types:
            - gasoline
            - diesel
          temperature:
            types:
            - urn:phenomenum:temperature
        count: 12
      properties:
        type:
          description: ""
          example: Car
          type: string
        attrs:
          description: ""
          example:
            speed:
              types:
              - Number
            fuel:
              types:
              - gasoline
              - diesel
            temperature:
              types:
              - urn:phenomenum:temperature
          properties: {}
          type: object
        count:
          description: ""
          example: 12
          format: int32
          type: integer
      required:
      - attrs
      - count
      - type
      title: List Entity Types response
      type: object
    RetrieveEntityTypeResponse:
      example:
        attrs:
          pressure:
            types:
            - Number
          humidity:
            types:
            - percentage
          temperature:
            types:
            - urn:phenomenum:temperature
        count: 7
      properties:
        attrs:
          description: ""
          example:
            pressure:
              types:
              - Number
            humidity:
              types:
              - percentage
            temperature:
              types:
              - urn:phenomenum:temperature
          properties: {}
          type: object
        count:
          description: ""
          example: 7
          format: int32
          type: integer
      required:
      - attrs
      - count
      title: Retrieve entity type response
      type: object
    Options23:
      enum:
      - count
      example: count
      title: options23
      type: string
      x-enum-elements:
      - name: count
        description: ""
    ListSubscriptionsResponse:
      example:
        id: abcdefg
        description: One subscription to rule them all
        subject:
          entities:
          - id: Bcn_Welt
            type: Room
          condition:
            attrs:
            - 'temperature '
            expression:
              q: temperature>40
        notification:
          httpCustom:
            url: http://localhost:1234
            headers:
              X-MyHeader: foo
            qs:
              authToken: bar
          attrsFormat: keyValues
          attrs:
          - temperature
          - humidity
          timesSent: 12
          lastNotification: 2015-10-05T16:00:00Z
          lastFailure: 2015-10-06T16:00:00Z
        expires: 2016-04-05T14:00:00Z
        status: failed
        throttling: 5
      properties:
        id:
          description: ""
          example: abcdefg
          type: string
        description:
          description: ""
          example: One subscription to rule them all
          type: string
        subject:
          description: ""
          example:
            entities:
            - id: Bcn_Welt
              type: Room
            condition:
              attrs:
              - 'temperature '
              expression:
                q: temperature>40
          properties: {}
          type: object
        notification:
          description: ""
          example:
            httpCustom:
              url: http://localhost:1234
              headers:
                X-MyHeader: foo
              qs:
                authToken: bar
            attrsFormat: keyValues
            attrs:
            - temperature
            - humidity
            timesSent: 12
            lastNotification: 2015-10-05T16:00:00Z
            lastFailure: 2015-10-06T16:00:00Z
          properties: {}
          type: object
        expires:
          description: ""
          example: 4/5/2016 2:00:00 PM
          type: string
        status:
          description: ""
          example: failed
          type: string
        throttling:
          description: ""
          example: 5
          format: int32
          type: integer
      required:
      - description
      - expires
      - id
      - notification
      - status
      - subject
      - throttling
      title: List Subscriptions response
      type: object
    CreateSubscriptionRequest:
      example:
        description: One subscription to rule them all
        subject:
          entities:
          - idPattern: .*
            type: Room
          condition:
            attrs:
            - temperature
            expression:
              q: temperature>40
        notification:
          http:
            url: http://localhost:1234
          attrs:
          - temperature
          - humidity
        expires: 2016-04-05T14:00:00Z
        throttling: 5
      properties:
        description:
          description: ""
          example: One subscription to rule them all
          type: string
        subject:
          description: ""
          example:
            entities:
            - idPattern: .*
              type: Room
            condition:
              attrs:
              - temperature
              expression:
                q: temperature>40
          properties: {}
          type: object
        notification:
          description: ""
          example:
            http:
              url: http://localhost:1234
            attrs:
            - temperature
            - humidity
          properties: {}
          type: object
        expires:
          description: ""
          example: 4/5/2016 2:00:00 PM
          type: string
        throttling:
          description: ""
          example: 5
          format: int32
          type: integer
      required:
      - notification
      - subject
      title: Create Subscription request
      type: object
    UpdateSubscriptionRequest:
      example:
        expires: 2016-04-05T14:00:00Z
      properties:
        expires:
          description: ""
          example: 4/5/2016 2:00:00 PM
          type: string
      required:
      - expires
      title: Update Subscription request
      type: object
    ListRegistrationsResponse:
      example:
        id: abcdefg
        description: Example Context Source
        dataProvided:
          entities:
          - id: Bcn_Welt
            type: Room
          attrs:
          - temperature
        provider:
          http:
            url: http://contextsource.example.org
          supportedForwardingMode: all
        expires: 2017-10-31T12:00:00
        status: active
        forwardingInformation:
          timesSent: 12
          lastForwarding: 2017-10-06T16:00:00Z
          lastSuccess: 2017-10-06T16:00:00Z
          lastFailure: 2017-10-05T16:00:00Z
      properties:
        id:
          description: ""
          example: abcdefg
          type: string
        description:
          description: ""
          example: Example Context Source
          type: string
        dataProvided:
          description: ""
          example:
            entities:
            - id: Bcn_Welt
              type: Room
            attrs:
            - temperature
          properties: {}
          type: object
        provider:
          description: ""
          example:
            http:
              url: http://contextsource.example.org
            supportedForwardingMode: all
          properties: {}
          type: object
        expires:
          description: ""
          example: 10/31/2017 12:00:00 PM
          type: string
        status:
          description: ""
          example: active
          type: string
        forwardingInformation:
          description: ""
          example:
            timesSent: 12
            lastForwarding: 2017-10-06T16:00:00Z
            lastSuccess: 2017-10-06T16:00:00Z
            lastFailure: 2017-10-05T16:00:00Z
          properties: {}
          type: object
      required:
      - dataProvided
      - description
      - expires
      - forwardingInformation
      - id
      - provider
      - status
      title: List Registrations response
      type: object
    CreateRegistrationRequest:
      example:
        description: Relative Humidity Context Source
        dataProvided:
          entities:
          - id: room2
            type: Room
          attrs:
          - relativeHumidity
        provider:
          http:
            url: http://localhost:1234
      properties:
        description:
          description: ""
          example: Relative Humidity Context Source
          type: string
        dataProvided:
          description: ""
          example:
            entities:
            - id: room2
              type: Room
            attrs:
            - relativeHumidity
          properties: {}
          type: object
        provider:
          description: ""
          example:
            http:
              url: http://localhost:1234
          properties: {}
          type: object
      required:
      - dataProvided
      - description
      - provider
      title: Create Registration request
      type: object
    RetrieveRegistrationResponse:
      example:
        id: abcdefg
        description: Example Context Source
        dataProvided:
          entities:
          - id: Bcn_Welt
            type: Room
          attrs:
          - temperature
        provider:
          http:
            url: http://contextsource.example.org
          supportedForwardingMode: all
        expires: 2017-10-31T12:00:00
        status: failed
        forwardingInformation:
          timesSent: 12
          lastForwarding: 2017-10-06T16:00:00Z
          lastFailure: 2017-10-06T16:00:00Z
          lastSuccess: 2017-10-05T18:25:00Z
      properties:
        id:
          description: ""
          example: abcdefg
          type: string
        description:
          description: ""
          example: Example Context Source
          type: string
        dataProvided:
          description: ""
          example:
            entities:
            - id: Bcn_Welt
              type: Room
            attrs:
            - temperature
          properties: {}
          type: object
        provider:
          description: ""
          example:
            http:
              url: http://contextsource.example.org
            supportedForwardingMode: all
          properties: {}
          type: object
        expires:
          description: ""
          example: 10/31/2017 12:00:00 PM
          type: string
        status:
          description: ""
          example: failed
          type: string
        forwardingInformation:
          description: ""
          example:
            timesSent: 12
            lastForwarding: 2017-10-06T16:00:00Z
            lastFailure: 2017-10-06T16:00:00Z
            lastSuccess: 2017-10-05T18:25:00Z
          properties: {}
          type: object
      required:
      - dataProvided
      - description
      - expires
      - forwardingInformation
      - id
      - provider
      - status
      title: Retrieve Registration response
      type: object
    UpdateRegistrationRequest:
      example:
        expires: 2017-10-04T00:00:00
      properties:
        expires:
          description: ""
          example: 10/4/2017 12:00:00 AM
          type: string
      required:
      - expires
      title: Update Registration request
      type: object
    UpdateRequest:
      example:
        actionType: append
        entities:
        - type: Room
          id: Bcn-Welt
          temperature:
            value: 21.7
          humidity:
            value: 60
        - type: Room
          id: Mad_Aud
          temperature:
            value: 22.9
          humidity:
            value: 85
      properties:
        actionType:
          description: ""
          example: append
          type: string
        entities:
          description: ""
          example:
          - type: Room
            id: Bcn-Welt
            temperature:
              value: 21.7
            humidity:
              value: 60
          - type: Room
            id: Mad_Aud
            temperature:
              value: 22.9
            humidity:
              value: 85
          items:
            properties: {}
            type: object
          type: array
      required:
      - actionType
      - entities
      title: Update request
      type: object
    QueryRequest:
      example:
        entities:
        - idPattern: .*
          type: Room
        - id: Car
          type: P-9873-K
        attrs:
        - temperature
        - humidity
        expression:
          q: temperature>20
        metadata:
        - accuracy
        - timestamp
      properties:
        entities:
          description: ""
          example:
          - idPattern: .*
            type: Room
          - id: Car
            type: P-9873-K
          items:
            properties: {}
            type: object
          type: array
        attrs:
          description: ""
          example:
          - temperature
          - humidity
          items:
            type: string
          type: array
        expression:
          description: ""
          example:
            q: temperature>20
          properties: {}
          type: object
        metadata:
          description: ""
          example:
          - accuracy
          - timestamp
          items:
            type: string
          type: array
      required:
      - attrs
      - entities
      - expression
      - metadata
      title: Query request
      type: object
    QueryResponse:
      example:
        type: Room
        id: DC_S1-D41
        temperature:
          value: 35.6
          type: Number
      properties:
        type:
          description: ""
          example: Room
          type: string
        id:
          description: ""
          example: DC_S1-D41
          type: string
        temperature:
          description: ""
          example:
            value: 35.6
            type: Number
          properties: {}
          type: object
      required:
      - id
      - temperature
      - type
      title: Query response
      type: object
    NotifyRequest:
      example:
        subscriptionId: 5aeb0ee97d4ef10a12a0262f
        data:
        - type: Room
          id: DC_S1-D41
          temperature:
            value: 35.6
            type: Number
        - type: Room
          id: Boe-Idearium
          temperature:
            value: 22.5
            type: Number
      properties:
        subscriptionId:
          description: ""
          example: 5aeb0ee97d4ef10a12a0262f
          type: string
        data:
          description: ""
          example:
          - type: Room
            id: DC_S1-D41
            temperature:
              value: 35.6
              type: Number
          - type: Room
            id: Boe-Idearium
            temperature:
              value: 22.5
              type: Number
          items:
            properties: {}
            type: object
          type: array
      required:
      - data
      - subscriptionId
      title: Notify request
      type: object
x-original-swagger-version: "2.0"

