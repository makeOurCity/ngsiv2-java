/*
 * FIWARE-NGSI v2 Specification
 * TODO: Add a description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package city.makeour.ngsi.v2.api;

import city.makeour.ngsi.v2.model.CreateEntityRequest;
import city.makeour.ngsi.v2.model.ListEntitiesResponse;
import city.makeour.ngsi.v2.model.ReplaceAllEntityAttributesRequest;
import city.makeour.ngsi.v2.model.RetrieveEntityAttributesResponse;
import city.makeour.ngsi.v2.model.RetrieveEntityResponse;
import city.makeour.ngsi.v2.model.UpdateExistingEntityAttributesRequest;
import city.makeour.ngsi.v2.model.UpdateOrAppendEntityAttributesRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

/**
 * API tests for EntitiesApi
 */
@Disabled
public class EntitiesApiTest {

    private final EntitiesApi api = new EntitiesApi();

    
    /**
     * Create Entity
     *
     * The payload is an object representing the entity to be created. The object follows the JSON entity representation format (described in a \&quot;JSON Entity Representation\&quot; section). Response: * Successful operation uses 201 Created (if upsert option is not used) or 204 No Content (if   upsert option is used). Response includes a &#x60;Location&#x60; header with the URL of the   created entity. * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void createEntityTest()  {
        String contentType = null;
        CreateEntityRequest body = null;
        String options = null;
        api.createEntity(contentType, body, options);

        // TODO: test validations
    }
    
    /**
     * List Entities
     *
     * Retrieves a list of entities that match different criteria by id, type, pattern matching (either id or type) and/or those which match a query or geographical query (see [Simple Query Language](#simple_query_language) and  [Geographical Queries](#geographical_queries)). A given entity has to match all the criteria to be retrieved (i.e., the criteria is combined in a logical AND way). Note that pattern matching query parameters are incompatible (i.e. mutually exclusive) with their corresponding exact matching parameters, i.e. &#x60;idPattern&#x60; with &#x60;id&#x60; and &#x60;typePattern&#x60; with &#x60;type&#x60;. The response payload is an array containing one object per matching entity. Each entity follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section). Response code: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void listEntitiesTest()  {
        String id = null;
        String type = null;
        String idPattern = null;
        String typePattern = null;
        String q = null;
        String mq = null;
        String georel = null;
        String geometry = null;
        String coords = null;
        Double limit = null;
        Double offset = null;
        String attrs = null;
        String metadata = null;
        String orderBy = null;
        String options = null;
        List<ListEntitiesResponse> response = api.listEntities(id, type, idPattern, typePattern, q, mq, georel, geometry, coords, limit, offset, attrs, metadata, orderBy, options);

        // TODO: test validations
    }
    
    /**
     * Remove Entity
     *
     * Delete the entity. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void removeEntityTest()  {
        String entityId = null;
        String type = null;
        api.removeEntity(entityId, type);

        // TODO: test validations
    }
    
    /**
     * Replace all entity attributes
     *
     * The request payload is an object representing the new entity attributes. The object follows the JSON entity representation format (described in a \&quot;JSON Entity Representation\&quot; above), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The attributes previously existing in the entity are removed and replaced by the ones in the request. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void replaceAllEntityAttributesTest()  {
        String entityId = null;
        String contentType = null;
        ReplaceAllEntityAttributesRequest body = null;
        String type = null;
        String options = null;
        api.replaceAllEntityAttributes(entityId, contentType, body, type, options);

        // TODO: test validations
    }
    
    /**
     * Retrieve Entity
     *
     * The response is an object representing the entity identified by the ID. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section). This operation must return one entity element only, but there may be more than one entity with the same ID (e.g. entities with same ID but different types). In such case, an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for more details.
     */
    @Test
    public void retrieveEntityTest()  {
        String entityId = null;
        String type = null;
        String attrs = null;
        String metadata = null;
        String options = null;
        RetrieveEntityResponse response = api.retrieveEntity(entityId, type, attrs, metadata, options);

        // TODO: test validations
    }
    
    /**
     * Retrieve Entity Attributes
     *
     * This request is similar to retreiving the whole entity, however this one omits the &#x60;id&#x60; and &#x60;type&#x60; fields. Just like the general request of getting an entire entity, this operation must return only one entity element. If more than one entity with the same ID is found (e.g. entities with same ID but different type), an error message is returned, with the HTTP status code set to 409 Conflict. Response: * Successful operation uses 200 OK * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void retrieveEntityAttributesTest()  {
        String entityId = null;
        String type = null;
        String attrs = null;
        String metadata = null;
        String options = null;
        RetrieveEntityAttributesResponse response = api.retrieveEntityAttributes(entityId, type, attrs, metadata, options);

        // TODO: test validations
    }
    
    /**
     * Update Existing Entity Attributes
     *
     * The request payload is an object representing the attributes to update. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload. In addition to that, if one or more attributes in the payload doesn&#39;t exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void updateExistingEntityAttributesTest()  {
        String entityId = null;
        String contentType = null;
        UpdateExistingEntityAttributesRequest body = null;
        String type = null;
        String options = null;
        api.updateExistingEntityAttributes(entityId, contentType, body, type, options);

        // TODO: test validations
    }
    
    /**
     * Update or Append Entity Attributes
     *
     * The request payload is an object representing the attributes to append or update. The object follows the JSON entity representation format (described in \&quot;JSON Entity Representation\&quot; section), except that &#x60;id&#x60; and &#x60;type&#x60; are not allowed. The entity attributes are updated with the ones in the payload, depending on whether the &#x60;append&#x60; operation option is used or not. * If &#x60;append&#x60; is not used: the entity attributes are updated (if they previously exist) or appended   (if they don&#39;t previously exist) with the ones in the payload. * If &#x60;append&#x60; is used (i.e. strict append semantics): all the attributes in the payload not   previously existing in the entity are appended. In addition to that, in case some of the   attributes in the payload already exist in the entity, an error is returned. Response: * Successful operation uses 204 No Content * Errors use a non-2xx and (optionally) an error payload. See subsection on \&quot;Error Responses\&quot; for   more details.
     */
    @Test
    public void updateOrAppendEntityAttributesTest()  {
        String entityId = null;
        String contentType = null;
        UpdateOrAppendEntityAttributesRequest body = null;
        String type = null;
        String options = null;
        api.updateOrAppendEntityAttributes(entityId, contentType, body, type, options);

        // TODO: test validations
    }
    
}