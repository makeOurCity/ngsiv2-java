/*
 * FIWARE-NGSI v2 Specification
 * TODO: Add a description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package city.makeour.ngsi.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateRegistrationRequest
 */
@JsonPropertyOrder({
  CreateRegistrationRequest.JSON_PROPERTY_DESCRIPTION,
  CreateRegistrationRequest.JSON_PROPERTY_DATA_PROVIDED,
  CreateRegistrationRequest.JSON_PROPERTY_PROVIDER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-27T19:56:40.594359+09:00[Asia/Tokyo]", comments = "Generator version: 7.12.0")
public class CreateRegistrationRequest {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nonnull
  private String description;

  public static final String JSON_PROPERTY_DATA_PROVIDED = "dataProvided";
  @jakarta.annotation.Nonnull
  private Object dataProvided;

  public static final String JSON_PROPERTY_PROVIDER = "provider";
  @jakarta.annotation.Nonnull
  private Object provider;

  public CreateRegistrationRequest() {
  }

  public CreateRegistrationRequest description(@jakarta.annotation.Nonnull String description) {
    
    this.description = description;
    return this;
  }

  /**
   * 
   * @return description
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDescription(@jakarta.annotation.Nonnull String description) {
    this.description = description;
  }

  public CreateRegistrationRequest dataProvided(@jakarta.annotation.Nonnull Object dataProvided) {
    
    this.dataProvided = dataProvided;
    return this;
  }

  /**
   * 
   * @return dataProvided
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DATA_PROVIDED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getDataProvided() {
    return dataProvided;
  }


  @JsonProperty(JSON_PROPERTY_DATA_PROVIDED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataProvided(@jakarta.annotation.Nonnull Object dataProvided) {
    this.dataProvided = dataProvided;
  }

  public CreateRegistrationRequest provider(@jakarta.annotation.Nonnull Object provider) {
    
    this.provider = provider;
    return this;
  }

  /**
   * 
   * @return provider
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getProvider() {
    return provider;
  }


  @JsonProperty(JSON_PROPERTY_PROVIDER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setProvider(@jakarta.annotation.Nonnull Object provider) {
    this.provider = provider;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateRegistrationRequest createRegistrationRequest = (CreateRegistrationRequest) o;
    return Objects.equals(this.description, createRegistrationRequest.description) &&
        Objects.equals(this.dataProvided, createRegistrationRequest.dataProvided) &&
        Objects.equals(this.provider, createRegistrationRequest.provider);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, dataProvided, provider);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateRegistrationRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    dataProvided: ").append(toIndentedString(dataProvided)).append("\n");
    sb.append("    provider: ").append(toIndentedString(provider)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

