/*
 * FIWARE-NGSI v2 Specification
 * TODO: Add a description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package city.makeour.ngsi.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * CreateSubscriptionRequest
 */
@JsonPropertyOrder({
  CreateSubscriptionRequest.JSON_PROPERTY_DESCRIPTION,
  CreateSubscriptionRequest.JSON_PROPERTY_SUBJECT,
  CreateSubscriptionRequest.JSON_PROPERTY_NOTIFICATION,
  CreateSubscriptionRequest.JSON_PROPERTY_EXPIRES,
  CreateSubscriptionRequest.JSON_PROPERTY_THROTTLING
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-27T19:56:40.594359+09:00[Asia/Tokyo]", comments = "Generator version: 7.12.0")
public class CreateSubscriptionRequest {
  public static final String JSON_PROPERTY_DESCRIPTION = "description";
  @jakarta.annotation.Nullable
  private String description;

  public static final String JSON_PROPERTY_SUBJECT = "subject";
  @jakarta.annotation.Nonnull
  private Object subject;

  public static final String JSON_PROPERTY_NOTIFICATION = "notification";
  @jakarta.annotation.Nonnull
  private Object notification;

  public static final String JSON_PROPERTY_EXPIRES = "expires";
  @jakarta.annotation.Nullable
  private String expires;

  public static final String JSON_PROPERTY_THROTTLING = "throttling";
  @jakarta.annotation.Nullable
  private Integer throttling;

  public CreateSubscriptionRequest() {
  }

  public CreateSubscriptionRequest description(@jakarta.annotation.Nullable String description) {
    
    this.description = description;
    return this;
  }

  /**
   * 
   * @return description
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getDescription() {
    return description;
  }


  @JsonProperty(JSON_PROPERTY_DESCRIPTION)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setDescription(@jakarta.annotation.Nullable String description) {
    this.description = description;
  }

  public CreateSubscriptionRequest subject(@jakarta.annotation.Nonnull Object subject) {
    
    this.subject = subject;
    return this;
  }

  /**
   * 
   * @return subject
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getSubject() {
    return subject;
  }


  @JsonProperty(JSON_PROPERTY_SUBJECT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSubject(@jakarta.annotation.Nonnull Object subject) {
    this.subject = subject;
  }

  public CreateSubscriptionRequest notification(@jakarta.annotation.Nonnull Object notification) {
    
    this.notification = notification;
    return this;
  }

  /**
   * 
   * @return notification
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NOTIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getNotification() {
    return notification;
  }


  @JsonProperty(JSON_PROPERTY_NOTIFICATION)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNotification(@jakarta.annotation.Nonnull Object notification) {
    this.notification = notification;
  }

  public CreateSubscriptionRequest expires(@jakarta.annotation.Nullable String expires) {
    
    this.expires = expires;
    return this;
  }

  /**
   * 
   * @return expires
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public String getExpires() {
    return expires;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpires(@jakarta.annotation.Nullable String expires) {
    this.expires = expires;
  }

  public CreateSubscriptionRequest throttling(@jakarta.annotation.Nullable Integer throttling) {
    
    this.throttling = throttling;
    return this;
  }

  /**
   * 
   * @return throttling
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_THROTTLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getThrottling() {
    return throttling;
  }


  @JsonProperty(JSON_PROPERTY_THROTTLING)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setThrottling(@jakarta.annotation.Nullable Integer throttling) {
    this.throttling = throttling;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateSubscriptionRequest createSubscriptionRequest = (CreateSubscriptionRequest) o;
    return Objects.equals(this.description, createSubscriptionRequest.description) &&
        Objects.equals(this.subject, createSubscriptionRequest.subject) &&
        Objects.equals(this.notification, createSubscriptionRequest.notification) &&
        Objects.equals(this.expires, createSubscriptionRequest.expires) &&
        Objects.equals(this.throttling, createSubscriptionRequest.throttling);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, subject, notification, expires, throttling);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateSubscriptionRequest {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    notification: ").append(toIndentedString(notification)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    throttling: ").append(toIndentedString(throttling)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

