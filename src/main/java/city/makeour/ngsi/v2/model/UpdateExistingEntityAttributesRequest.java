/*
 * FIWARE-NGSI v2 Specification
 * TODO: Add a description
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package city.makeour.ngsi.v2.model;

import java.util.Objects;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;

/**
 * UpdateExistingEntityAttributesRequest
 */
@JsonPropertyOrder({
  UpdateExistingEntityAttributesRequest.JSON_PROPERTY_TEMPERATURE,
  UpdateExistingEntityAttributesRequest.JSON_PROPERTY_SEAT_NUMBER
})
@jakarta.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-27T19:56:40.594359+09:00[Asia/Tokyo]", comments = "Generator version: 7.12.0")
public class UpdateExistingEntityAttributesRequest {
  public static final String JSON_PROPERTY_TEMPERATURE = "temperature";
  @jakarta.annotation.Nonnull
  private Object temperature;

  public static final String JSON_PROPERTY_SEAT_NUMBER = "seatNumber";
  @jakarta.annotation.Nonnull
  private Object seatNumber;

  public UpdateExistingEntityAttributesRequest() {
  }

  public UpdateExistingEntityAttributesRequest temperature(@jakarta.annotation.Nonnull Object temperature) {
    
    this.temperature = temperature;
    return this;
  }

  /**
   * 
   * @return temperature
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getTemperature() {
    return temperature;
  }


  @JsonProperty(JSON_PROPERTY_TEMPERATURE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setTemperature(@jakarta.annotation.Nonnull Object temperature) {
    this.temperature = temperature;
  }

  public UpdateExistingEntityAttributesRequest seatNumber(@jakarta.annotation.Nonnull Object seatNumber) {
    
    this.seatNumber = seatNumber;
    return this;
  }

  /**
   * 
   * @return seatNumber
   */
  @jakarta.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SEAT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public Object getSeatNumber() {
    return seatNumber;
  }


  @JsonProperty(JSON_PROPERTY_SEAT_NUMBER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSeatNumber(@jakarta.annotation.Nonnull Object seatNumber) {
    this.seatNumber = seatNumber;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UpdateExistingEntityAttributesRequest updateExistingEntityAttributesRequest = (UpdateExistingEntityAttributesRequest) o;
    return Objects.equals(this.temperature, updateExistingEntityAttributesRequest.temperature) &&
        Objects.equals(this.seatNumber, updateExistingEntityAttributesRequest.seatNumber);
  }

  @Override
  public int hashCode() {
    return Objects.hash(temperature, seatNumber);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UpdateExistingEntityAttributesRequest {\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    seatNumber: ").append(toIndentedString(seatNumber)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

